cmake_minimum_required(VERSION 3.22)
project(clox C)

option(DEBUG_TRACE_EXECUTION "Trace execution of the VM" OFF)
option(DEBUG_PRINT_CODE "Print generated bytecode" OFF)
option(ENABLE_ASAN "Enable AddressSanitizer" OFF)
option(ENABLE_UBSAN "Enable UndefinedBehaviorSanitizer" OFF)

add_executable(clox
        main.c
        common.h
        chunk.h
        chunk.c
        memutil.h
        memutil.c
        debug.h
        debug.c
        value.h
        value.c
        vm.c
        vm.h
        compiler.c
        compiler.h
        scanner.h
        scanner.c
        object.h
        object.c
        table.h
        table.c
)

target_compile_features(clox PRIVATE c_std_11)
set_target_properties(clox PROPERTIES
        C_STANDARD 11
        C_EXTENSIONS OFF
        C_STANDARD_REQUIRED ON
)

target_compile_options(clox PRIVATE
        $<$<CONFIG:DEBUG>:
        -O0;-gdwarf-4;-Wall;-Wextra;-Werror;-Wformat;-Wformat=2;-ggdb3;
        -Werror=implicit;-Werror=incompatible-pointer-types;-Werror=int-conversion;
        -Wconversion;-Wsign-conversion;-Wimplicit-fallthrough;
        -U_FORTIFY_SOURCE;-D_FORTIFY_SOURCE=2;
        -fno-strict-aliasing;-fno-strict-overflow;-fno-delete-null-pointer-checks;
        -fstack-clash-protection;-fstack-protector-strong;-fPIE>
)

if (ENABLE_ASAN)
    target_compile_options(clox PRIVATE -fsanitize=address)
    target_link_options(clox PRIVATE -fsanitize=address)
endif()

if (ENABLE_UBSAN)
    target_compile_options(clox PRIVATE -fsanitize=undefined)
    target_link_options(clox PRIVATE -fsanitize=undefined)
endif()

target_compile_definitions(clox PRIVATE
        $<$<BOOL:${DEBUG_TRACE_EXECUTION}>:DEBUG_TRACE_EXECUTION>
        $<$<BOOL:${DEBUG_PRINT_CODE}>:DEBUG_PRINT_CODE>
)

target_link_libraries(clox PRIVATE m)

find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
    message(STATUS "Using ${CCACHE_PROGRAM} as compiler launcher")
    set_target_properties(clox PROPERTIES
            C_COMPILER_LAUNCHER ${CCACHE_PROGRAM}
    )
endif()
